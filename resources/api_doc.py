from flask_restful import Resource, reqparse
from db import db
#from flask_jwt import jwt_required
from flask_jwt_extended import jwt_required, get_jwt_identity
from models.phagebank import Role, Patient, LotPatient, Lot, Vial, UserTrial, Trial,  TrialPatient #add TrialPatient and rename Userinf
from models.phagebank  import UserModel as User


class GetAPIDoc(Resource):
    def get(self):
        return{'Available APIs': {
            '/register': {"Method": "POST", "Input": {"username": "<username>", "password": "<Password>","fname": "<first name>", "lname": "<last name>", "email_address": "<email address>", "street1": "<street address Line 1>","street2": "<street address line 2>", "city": "<city name>", "state": "<state name>", "zip": "<zip code>", "phone": "<phone number>", "isLive": "<isLive Field>", "role_id": "<role id>",}, "Description": "This API is Used to Register a new User.", "SQL Command": "insert into User(username, password, fname, lname, email_address, street1, street2, city, state, zip, phone, isLive, role_id) Values(%, %, %, %, %, %, %, %, %, %, %, %, %)"},
            '/login': {"Method": "POST", "Input": {"username": "<username>", "password": "<Password>"}, "Description": "This API is Used for User Login."},
            '/logout': {"Method": "POST", "Input": None, "Description": "This API is Used for User Logout."},
            '/all_lot': {"Method": "GET", "Input": None, "Description": "This API is Used to get All the enteries in the `Lot` table.", "SQL Command": "Select * from Lot"},
            '/all_users': {"Method": "GET", "Input": None, "Description": "This API is Used to get the list of Registered Users. (Information displayed is based on Authorization level)", "SQL Command": "Select * from User"},
            '/get_patient_vial': {"Method": "GET", "Input": "<patient_id>", "Description": "To get the list of Vials/Lots associated with the given patient ID", "SQL Command": "Select Patient.patient_id, Vials.serial_number, Lot.lot_number from Vials join Patient_Lot on Patient_Lot.lot_id=Vials.lot_id join Patient on Patient_Lot.patient_id=Patient.idPatient join Lot on Patient_Lot.lot_id=Lot.idLot where Patient.patient_id = 'demo-999' order by Vials.serial_number;"},
            '/update_used_vial': {"Method": "GET", "Input": "<serial number>", "Description": "To Update when a particular vial is used.", "SQL Command": "Update Vials set used=1 where serial_number=serial_number"},
            '/get_user_patient_vial': {"Method": "GET", "Input": "<query_user_id>", "Description": "To get the useri's patient vial info.(Used & Unused)", "SQL Command": "select Patient.patient_id, Lot.lot_number, Lot.potency, Lot.HCP, Lot.Chloro, Lot.Triton, Lot.endo, Lot.analysis_date, Lot.report_date, Lot.pH, Lot.name, Vials.serial_number from User join User_Trials on User_Trials.user_id = User.idUser join Trials on Trials.idTrials = User_Trials.Trial_id join Trial_Patient on Trial_Patient.trial_id = Trials.idTrials join Patient on Patient.idPatient = Trial_Patient.patient_id join Patient_Lot on Patient_Lot.patient_id = Patient.idPatient join Lot on Lot.idLot = Patient_Lot.lot_id join Vials on Vials.lot_id = Lot.idLot where idUser = 1;"},
            '/add_lot': {"Method": "POST", "Input": {"lot_number": "<lot number>", "potency": "<potency>","HCP": "<HCP>", "Chloro": "<Chloro>","Triton": "<Triton>", "endo": "<endo>","analysis_date": "<analysis date>", "report_date": "<report date>", "pH": "<pH>", "name": "<Lot name>"}, "Description": "To add a new Lot to `Lot` Table", "SQL Command": "INSERT INTO Lot(lot_number, potency, HCP, Chloro, Triton, endo, analysis_date, report_date, create_dt, pH, name, review_dt, created_by, reviewed_by) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);" },
            '/trial_for_patient': {"Method": "GET", "Input": "patient_id", "Description": "Get The Trials for a Patient.", "SQL Command": "select Trial.idTrials,  Trial.name from Trial join TrialPatient on TrialPatient.trial_id = Trial.idTrials join Patient on Patient.idPatient = TrialPatient.patient_id where Patient.idPatient = query_patient_id"},
            '/vial_for_patient': {"Method": "GET", "Input": "<patient_id><query_freezer_barcode>", "Description": "Get The Vials for a Patient.", "SQL Command": "select Vial.serial_number from Patient join LotPatient on LotPatient.patient_id = Patient.idPatient join Lot on Lot.idLot = LotPatient.lot_id join Vial on  Vial.lot_id = Lot.idLot where Patient.idPatient = query_patient_id) and Vial.used = 0 and Vial.freezer_barcode_tag = query_freezer_barcode"},
            '/get_user_patient': {"Method": "GET", "Input": "None", "Description": "Gets the list of Patients & Trials for the Logged In User.", "SQL Command": "select Patient.idPatient, Patient.patient_id, Patient.patient_wt, Trial.idTrials, Trial.name from User join UserTrial on UserTrial.user_id = User.idUser join Trial on Trial.idTrials = UserTrial.trial_id join TrialPatient on TrialPatient.trial_id = Trial.idTrials join Patient on Patient.idPatient = TrialPatient.patient_id  where User.idUser = logdin_userid"},
            '/get_lot_for_patient_trial': {"Method": "GET", "Input": "<query_patient_id><query_trial_id>", "Description": "Gets the list of Lots (Verified) for given patient Id and Trial Id", "SQL Command": "select Lot.idLot, Lot.lot_number, Lot.potency, Lot.HCP, Lot.Chloro, Lot.Triton, Lot.endo, Lot.analysis_date, Lot.report_date, Lot.pH, Lot.name, Lot.review_dt, Lot.created_by, Lot.reviewed_by from Lot join LotPatient on LotPatient.lot_id = Lot.idLot join TrialPatient on TrialPatient.patient_id = LotPatient.patient_id where LotPatient.patient_id = query_patient_id and TrialPatient.trial_id = query_trial_id and Lot.reviewed_by is not Null"},
            '/get_vial_for_lot_freezer': {"Method": "GET", "Input": "<lot_id><freezer_barcode>", "Description": "Gets the list Vials for give Lot ID and Freezer ID", "SQL Command": " select Vial.idVials, Vial.serial_number, Vial.create_dt, Vial.lot_id, Vial.used, Vial.freezer_barcode_tag from Vial where Vial.lot_id = query_lot_id and Vial.freezer_barcode_tag = query_freezer_id) and Vial.used = 0"},
            '/add_patient': {"Method": "POST", "INPUT": {"patient_id": "<patient_id>", "patient_wt": "patient_wt"}, "Description": "Add new Patient to The Database.", "SQL Command": "Insert into Patient(idPatient, patient_id, create_dt, patient_wt) values(%, %, %, %)"}
            }}

